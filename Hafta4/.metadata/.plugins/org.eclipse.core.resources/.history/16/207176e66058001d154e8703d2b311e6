package Kodlama.io.Devs.business.concretes;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import Kodlama.io.Devs.business.abstracts.ProgrammingLanguageService;
import Kodlama.io.Devs.dataAccess.abstracts.ProgrammingLanguageRepository;
import Kodlama.io.Devs.entites.concretes.ProgrammingLanguage;

@Service
public class ProgrammingLanguageManager implements ProgrammingLanguageService {

	private ProgrammingLanguageRepository languageRepository;

	@Autowired
	public ProgrammingLanguageManager(ProgrammingLanguageRepository languageRepository) {
		this.languageRepository = languageRepository;
	}
	
	
	@Override
	public List<ProgrammingLanguage> getAll(){
		
		return languageRepository.getAll();
	}


	@Override
	public List<ProgrammingLanguage> getAdd(ProgrammingLanguage programmingLanguage) throws Exception {
		
		if(isNameEmpty(programmingLanguage)) {
			throw new Exception("İsim boş geçilemez.");
		}
		
		if(isNameExist(programmingLanguage) == false) {
			throw new Exception("Aynı isimden mecvut.");
		}
		
		return languageRepository.getAdd(programmingLanguage);
		
	}


	@Override
	public List<ProgrammingLanguage> getUpdate(ProgrammingLanguage programmingLanguage, int index) throws Exception {
		
		if(isNameEmpty(programmingLanguage)) {
			throw new Exception("İsim boş geçilemez.");
		}
		
		if(isNameExist(programmingLanguage) == false) {
			throw new Exception("Aynı isimden mecvut.");
		}
		
		return languageRepository.getUpdate(programmingLanguage, index);
	}


	@Override
	public List<ProgrammingLanguage> getRemove(int id) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public ProgrammingLanguage getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public boolean isNameExist(ProgrammingLanguage programmingLanguage) {

		for(ProgrammingLanguage languages : getAll()) {
			if(languages.getName().equals(programmingLanguage.getName())) {
				return false;
			}
		}
		
		return true;
		
	}
	
	public boolean isNameEmpty(ProgrammingLanguage programmingLanguage) {
		
		if(programmingLanguage.getName().isEmpty()) {
			return true;
		}
		
		return false;
		
	}
	
	

}
